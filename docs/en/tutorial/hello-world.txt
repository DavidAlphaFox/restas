.. _tutorial-hello-world: 

Hello World
===========

Simpliest example
-----------------

Here is a classical "Hello world":

.. code-block:: common-lisp

  (asdf:operate 'asdf:load-op '#:restas)

  (restas:define-module #:restas.hello-world
    (:use :cl))

  (in-package #:restas.hello-world)

  (restas:define-route main ("")
    "<h1>Hello world!</h1>")

  (restas:start '#:restas.hello-world :port 8080)

If you execute this code and open in you browser http://localhost:8080/,
you will see "Hello world" heading. That's nice. :)

Now, one after another, line by line:

To begin with, lets load `RESTAS`_ itself:

.. code-block:: common-lisp

  (asdf:operate 'asdf:load-op '#:restas)

Then we define a new module:

.. code-block:: common-lisp

  (restas:define-module #:restas.hello-world
    (:use :cl))

Actually, this code only creates a :hs:`package` amd initializes it, adding to it several
variables. A module is not an object or a symbol, but it is associated with a package, and
this is quite intresting. Why is it done in a such way? I want a process of creation of
a web application to be of maximal simplicity and shortness. And using a package as
a module lets in many cases not to specify the module explicitly, but just to place the code
concerning the module into package associated with it.

Now we change current package, as it follows from previous parapraph, this is important.

.. code-block:: common-lisp

  (in-package #:restas.hello-world)

Then we create a route for processing GET request to site's root.

.. code-block:: common-lisp

  (restas:define-route main ("")
    "<h1>Hello world!</h1>")

Inside ot the macro :macro:`restas:define-route` you can place any code, which must
return string, or octets :hs:`array`, or :hs:`pathname` (in this case client will
get according file), of an integer number (which is interpreted as request's status,
for example, :const:`hunchentoot:+http-not-found++`). Also, this code can freely use
any variables, noted in the `Hunchentoot`_ web server's documentation (e.g.
:var:`hunchentoot:*request*` or :var:`hunchentoot:*reply*`).

Lets launch the web server and activise the site:

.. code-block:: common-lisp

  (restas:start '#:restas.hello-world :port 8080)

Processing of POST requests.
----------------------------

This example shows different treatment of GET and POST requests:

.. code-block:: common-lisp

  (asdf:operate 'asdf:load-op :cl-who)
  (asdf:operate 'asdf:load-op :restas)

  (restas:define-module :restas.example-1
    (:use :cl))

  (in-package :restas.example-1)

  (restas:define-route main ("" :method :get)
    (who:with-html-output-to-string (out)
      (:html
       (:body
        ((:form :method :post)
         ((:input :name "message"))
         ((:input :type "submit" :value "Send")))))))

  (restas:define-route main/post ("" :method :post)
    (who:with-html-output-to-string (out)
      (:html
       (:body
        (:div
         (:b (who:fmt "test message: ~A"
                      (hunchentoot:post-parameter "message"))))
        ((:a :href (restas:genurl 'main)) "Try again")))))

  (restas:start '#:restas.example-1 :port 8080)

When you execute it and open the page http://localhost:8080/, you will see
an elementary form, in which you are offered to type an arbitrary message.
After that you can Send it and get a new page, containing typed message
and a link with an offer to repeat your input. Just a little bit to improve
and you can start selling it. :)

This example is different from previous in that it now contais two routes, one for
processing GET request and the other one for POST. As you see, you can specify
the type of request the route concerns, with key :method, which is :get by default.
Presence of "post" ending in 'main/post route name is just a coinsidence: routes
can be named in an arbitrary way, while each route has a unique name. Also,
for html generation `cl-who`_ library is used here, but I completely can't recommend
using it for real applications, inspite it is just you need for small demonstrations.

Parametrized routes
-------------------

Url template specified in macro :macro:`restas:define-route` isn't required to be such
simple as in previous examples, and it can contain several parameters,
available for handler and specified inside of :macro:`restas:define-route`.

.. code-block:: common-lisp

  (asdf:operate 'asdf:load-op :cl-who)
  (asdf:operate 'asdf:load-op :restas)

  (restas:define-module :restas.example-2
    (:use :cl :iter))

  (in-package :restas.example-2)

  (restas:define-route root ("")
    (who:with-html-output-to-string (out)
      (:html
       (:head
        (:title "Example 2: Index"))
       (:body
        (:h1 "Index")
        (:ul
         (iter (for x from 1 to 10)
               (who:htm (:li
                         ((:a :href (genurl 'chapter-?.html :id x))
                          (who:fmt "Chapter ~A" x))))))))))

  (restas:define-route chapter-?.html ("chapter-:(id).html")
    (who:with-html-output-to-string (out)
      (:html
       (:head
        (:title (who:fmt "Example 2. Chapter ~A" id)))
       (:body
        (:h1 (who:fmt "Chapter ~A" id))
        (:ul
         (iter (for x from 1 to 10)
               (who:htm (:li
                         ((:a :href (genurl 'chapter-?-?.html :id1 id :id2 x))
                          (who:fmt "Chapter ~A-~A" id x))))))
        ((:a :href (genurl 'root))
         "Back to Index")))))
  
  (restas:define-route chapter-?-?.html ("chapter-:(id1)-:(id2).html")
    (who:with-html-output-to-string (out)
      (:html
       (:head
        (:title (who:fmt "Example 2. Chapter ~A-~A" id1 id2)))
       (:body
        (:h1 (who:fmt "Chapter ~A-~A" id1 id2))
        (:p (who:fmt "This is a chapter ~A-~A" id1 id2))
        ((:a :href (genurl 'chapter-?.html :id id1))
         (who:fmt "Back to Chapter ~A" id1))))))

  (restas:start :restas.example-2 :port 8080)

This example demonstrates navigation in some "Book with table of contents" and, besides
of parametrized routes, shows generation of links from routes' names.

Code of given examples comes with `RESTAS`_ distribution and can be found in 'example'
directory.

.. _RESTAS: http://restas.lisper.ru/
.. _cl-who: http://weitz.de/cl-who/
.. _Hunchentoot: http://www.weitz.de/hunchentoot/

