===============
 Представление
===============

Отделение логики приложения от логики преставления является мощной и полезной
техникой, часто используемой при разработке веб-приложений. `RESTAS`_ не
обязывает использовать подобное разделение, но при желании оно обеспечивается
за счёт generic-функции:

.. code-block:: common-lisp

  (defgeneric restas:render-object (drawer object)
    (:documentation "Render object via drawer"))

которая всегда вызывается для обработки данных, возвращаемых обработчиками
маршрутов (определяемых с помощью :fun:`restas:define-route`). Здесь видно,
что для генерации контента используется два объекта: drawer и данные, так что
можно говорить о полноценном разделении логики и представления, ну а
`мультиметоды <http://lisper.ru/pcl/object-reorientation-generic-functions>`_ CL,
делают подобный подход весьма мощным. Используемый drawer указывается в переменной
модуля :var:`*default-render-method*` и по-умолчанию установлен в nil.
В `RESTAS`_ определены специализации :fun:`restas:render-object`, которые в
качестве данных могу принимать:

* :hs:`string` или :hs:`array` octets - данные просто отдаются клиенту без
  какой-либо дополнительной обработки

* :hs:`pathname` - файл отдаётся клиенту с помощью :fun:`hunchentoot:handle-static-file`

* integer - результат интерпретируется как HTTP-статус и клиенту отдаётся
  соответствующая специальная страница

* В прочих случаях сообщается об ошибке

Так же, определенна специализации, когда в качестве drawer передаётся функция:

* :hs:`pathname` или integer - вызывается обработчик по-умолчанию (данные просто
  отдаются клиенту без обработки)

* В прочих случаях с помощью funcall вызывается указанная функция для обработки
  переданных данных и результат отдаётся клиенту

Кроме этого, определена специализация, когда в качестве drawer передаётся
произвольный :hs:`package`. Эта возможность имеет следующее обоснование:

* Каждый маршрут является именованным и связан с :hs:`symbol`

* Почти всегда для логики представления автор использует `cl-closure-template`_,
  которая компилирует шаблоны в функции, для которых создаётся отдельный
  :hs:`package`
  
Если следовать небольшому соглашению и именовать шаблоны так же, как и маршруты,
то можно в качестве :var:`*default-render-method*` указать пакет, содержащий в себе
функции шаблонов, и `RESTAS`_ будет автоматически вызывать для обработки данных,
генерированных в обработчике маршрута, функцию-шаблон с именем (:hs:`symbol-name`)
совпадающим с именем маршрута. Вот такое небольшое волшебство, реализованное весьма
простым и понятным образом. Поскольку, технически это всего лишь специализация
:fun:`restas:render-object`, то её можно использовать и другими способами, например,
сейчас в `restas-colorize`_ (аналог pastebin, в работе его можно посмотреть на
http://lisper.ru/apps/format/), для генерации разметки используется следующий код:

.. code-block:: common-lisp

  (restas:define-default-render-method (obj)
    (closure-template.standard:xhtml-strict-frame
      (list :title (getf obj :title)
            :body (restas.colorize.view:with-main-menu
                    (list :href-all (restas:genurl 'list-pastes)
                          :href-create (restas:genurl 'create-paste)
                          :body (restas:render-object (find-package '#:restas.colorize.view)
                                                      obj)))
            :css (iter (for item in '("style.css" "colorize.css"))
                       (collect (restas:genurl 'css :file item))))))

Здесь задаётся :var:`*default-render-method*` в виде функции (для упрощения и наглядности
используется макрос :macro:`restas:define-default-render-method`), которая с помощью
"пакета с шаблонами" генерирует содержательную часть страницы:

.. code-block:: common-lisp

  (restas:render-object (find-package '#:restas.colorize.view) obj)

которую затем использует для генерации законченного html-кода. 

Ну и конечно, разработчик может определить собственные специализации
:fun:`restas:render-object` для своего типа drawer. 

Другим способом отделения логики от представления, который может использоваться,
например, когда использование :var:`*default-render-method*` не подходит
для конкретного маршрута - это параметр :render-method макроса :macro:`restas:define-route`.
Например:

.. code-block:: common-lisp

  (restas:define-route api-method ("/path/to/method/:(param1)/:(param2)"
                                   :content-type "application/json"
                                   :render-method #'json:encode-json)
    (list :field1 (sql-query "select ...")
          :field2 (sql-query "select ..."))))   


.. _RESTAS: http://restas.lisper.ru/
.. _cl-closure-template: http://code.google.com/p/cl-closure-template/
.. _restas-colorize: http://github.com/archimag/restas-colorize
